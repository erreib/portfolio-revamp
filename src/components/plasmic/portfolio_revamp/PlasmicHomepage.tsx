// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: pPMwtDeJqhjkevukr6y1tF
// Component: WiRkh1DPRNs4
import * as React from "react";

import { Link, GatsbyLinkProps as LinkProps } from "gatsby";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import PostGroup from "../../PostGroup"; // plasmic-import: 7uOT7ub377V/component

import { useScreenVariants as useScreenVariantsacMvPt7MOxbgb } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: AcMvPt7MOxbgb/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic_portfolio_revamp.module.css"; // plasmic-import: pPMwtDeJqhjkevukr6y1tF/projectcss
import * as sty from "./PlasmicHomepage.module.css"; // plasmic-import: WiRkh1DPRNs4/css

import imageT9Tp7XQjv from "./images/image.svg"; // plasmic-import: t9tp7xQjv/picture

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  body?: p.Flex<"div">;
  siteNav?: p.Flex<"div">;
  frame21?: p.Flex<"div">;
  pageBanner?: p.Flex<"div">;
  group17?: p.Flex<"div">;
  img?: p.Flex<typeof p.PlasmicImg>;
  landingContent?: p.Flex<"div">;
  workPosts?: p.Flex<"div">;
  blogPosts?: p.Flex<"div">;
};

export interface DefaultHomepageProps {
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

export function Head() {
  return <></>;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsacMvPt7MOxbgb()
  });

  return (
    <React.Fragment>
      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"body"}
            data-plasmic-override={overrides.body}
            className={classNames(projectcss.all, sty.body)}
          >
            <div
              data-plasmic-name={"siteNav"}
              data-plasmic-override={overrides.siteNav}
              className={classNames(projectcss.all, sty.siteNav)}
            >
              {true ? (
                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__gv3VT
                  )}
                  component={Link}
                  platform={"gatsby"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___2XHis
                    )}
                  >
                    {"Erik Reiblein"}
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__t75UL
                    )}
                  >
                    {"UX/Product Design"}
                  </div>
                </p.PlasmicLink>
              ) : null}

              <p.Stack
                as={"div"}
                data-plasmic-name={"frame21"}
                data-plasmic-override={overrides.frame21}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame21)}
              >
                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__t1HaS
                  )}
                  component={Link}
                  platform={"gatsby"}
                >
                  {"Work"}
                </p.PlasmicLink>

                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__wojOi
                  )}
                  component={Link}
                  platform={"gatsby"}
                >
                  {"About"}
                </p.PlasmicLink>

                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__rvnpB
                  )}
                  component={Link}
                  platform={"gatsby"}
                >
                  {"Contact"}
                </p.PlasmicLink>
              </p.Stack>
            </div>

            <p.Stack
              as={"div"}
              data-plasmic-name={"pageBanner"}
              data-plasmic-override={overrides.pageBanner}
              hasGap={true}
              className={classNames(projectcss.all, sty.pageBanner)}
            >
              <div
                data-plasmic-name={"group17"}
                data-plasmic-override={overrides.group17}
                className={classNames(projectcss.all, sty.group17)}
              >
                <p.PlasmicImg
                  data-plasmic-name={"img"}
                  data-plasmic-override={overrides.img}
                  alt={""}
                  className={classNames(sty.img)}
                  displayHeight={"100%" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"none" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"100%" as const}
                  loading={"lazy" as const}
                  src={{
                    src: imageT9Tp7XQjv,
                    fullWidth: 285,
                    fullHeight: 150,
                    aspectRatio: 1.901587
                  }}
                />
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ny51Z
                )}
              >
                {
                  "Erik Reiblein is a user experience designer who specializes in tackling projects with complex functionality requirements."
                }
              </div>
            </p.Stack>

            {true ? (
              <div
                data-plasmic-name={"landingContent"}
                data-plasmic-override={overrides.landingContent}
                className={classNames(projectcss.all, sty.landingContent)}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"workPosts"}
                  data-plasmic-override={overrides.workPosts}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.workPosts)}
                >
                  <PostGroup
                    className={classNames(
                      "__wab_instance",
                      sty.postGroup__pdsiR
                    )}
                  >
                    {"UX Design"}
                  </PostGroup>

                  <PostGroup
                    className={classNames(
                      "__wab_instance",
                      sty.postGroup__v9FSg
                    )}
                  >
                    {"Web Design"}
                  </PostGroup>

                  <PostGroup
                    className={classNames(
                      "__wab_instance",
                      sty.postGroup__wr2B
                    )}
                  >
                    {"Student Projects"}
                  </PostGroup>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"blogPosts"}
                  data-plasmic-override={overrides.blogPosts}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.blogPosts)}
                >
                  <PostGroup
                    className={classNames(
                      "__wab_instance",
                      sty.postGroup__k9JpQ
                    )}
                  >
                    {"Blog"}
                  </PostGroup>
                </p.Stack>
              </div>
            ) : null}
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "body",
    "siteNav",
    "frame21",
    "pageBanner",
    "group17",
    "img",
    "landingContent",
    "workPosts",
    "blogPosts"
  ],
  body: [
    "body",
    "siteNav",
    "frame21",
    "pageBanner",
    "group17",
    "img",
    "landingContent",
    "workPosts",
    "blogPosts"
  ],
  siteNav: ["siteNav", "frame21"],
  frame21: ["frame21"],
  pageBanner: ["pageBanner", "group17", "img"],
  group17: ["group17", "img"],
  img: ["img"],
  landingContent: ["landingContent", "workPosts", "blogPosts"],
  workPosts: ["workPosts"],
  blogPosts: ["blogPosts"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  body: "div";
  siteNav: "div";
  frame21: "div";
  pageBanner: "div";
  group17: "div";
  img: typeof p.PlasmicImg;
  landingContent: "div";
  workPosts: "div";
  blogPosts: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    body: makeNodeComponent("body"),
    siteNav: makeNodeComponent("siteNav"),
    frame21: makeNodeComponent("frame21"),
    pageBanner: makeNodeComponent("pageBanner"),
    group17: makeNodeComponent("group17"),
    img: makeNodeComponent("img"),
    landingContent: makeNodeComponent("landingContent"),
    workPosts: makeNodeComponent("workPosts"),
    blogPosts: makeNodeComponent("blogPosts"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
