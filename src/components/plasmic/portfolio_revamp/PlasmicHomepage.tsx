// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: pPMwtDeJqhjkevukr6y1tF
// Component: WiRkh1DPRNs4
import * as React from "react";

import { Link, GatsbyLinkProps as LinkProps } from "gatsby";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import LandingBannerAnimated from "../../LandingBannerAnimated"; // plasmic-import: PvD0-TnnhU/component
import { ContentfulFetcher } from "@plasmicpkgs/plasmic-contentful"; // plasmic-import: 2evg2Dug_px/codeComponent
import { ContentfulField } from "@plasmicpkgs/plasmic-contentful"; // plasmic-import: XJVyShAqlB9/codeComponent
import PostItem from "../../PostItem"; // plasmic-import: _u_Efw8ed7/component

import { useScreenVariants as useScreenVariantsacMvPt7MOxbgb } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: AcMvPt7MOxbgb/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic_portfolio_revamp.module.css"; // plasmic-import: pPMwtDeJqhjkevukr6y1tF/projectcss
import * as sty from "./PlasmicHomepage.module.css"; // plasmic-import: WiRkh1DPRNs4/css

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {
  children?: React.ReactNode;
  children2?: React.ReactNode;
  children3?: React.ReactNode;
  children5?: React.ReactNode;
  children6?: React.ReactNode;
};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>(
  "children",
  "children2",
  "children3",
  "children5",
  "children6"
);

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  body?: p.Flex<"div">;
  siteNav?: p.Flex<"div">;
  frame21?: p.Flex<"div">;
  landingBannerAnimated?: p.Flex<typeof LandingBannerAnimated>;
  landingContent?: p.Flex<"div">;
  workPosts?: p.Flex<"div">;
  postTitleContainer2?: p.Flex<"div">;
  postTitleInnerContainer2?: p.Flex<"div">;
  projectTypeContainer3?: p.Flex<"div">;
  tagContainer?: p.Flex<"div">;
  postGroupOuterContainer?: p.Flex<"div">;
  postGroupInnerContainer?: p.Flex<"div">;
  postTitleContainer?: p.Flex<"div">;
  postTitleInnerContainer?: p.Flex<"div">;
  postNavContainer?: p.Flex<"div">;
  postItem?: p.Flex<typeof PostItem>;
  projectTypeContainer2?: p.Flex<"div">;
  postItem2?: p.Flex<typeof PostItem>;
  projectTypeContainer4?: p.Flex<"div">;
  postGroupInnerContainer2?: p.Flex<"div">;
  postTitleContainer3?: p.Flex<"div">;
  postTitleInnerContainer3?: p.Flex<"div">;
  postNavContainer2?: p.Flex<"div">;
  postItem3?: p.Flex<typeof PostItem>;
  projectTypeContainer5?: p.Flex<"div">;
  blogPosts?: p.Flex<"div">;
  postGroupOuterContainer2?: p.Flex<"div">;
  postGroupInnerContainer3?: p.Flex<"div">;
  postTitleContainer5?: p.Flex<"div">;
  postTitleInnerContainer5?: p.Flex<"div">;
  postNavContainer3?: p.Flex<"div">;
  postItem4?: p.Flex<typeof PostItem>;
  projectTypeContainer7?: p.Flex<"div">;
  postItem5?: p.Flex<typeof PostItem>;
  projectTypeContainer8?: p.Flex<"div">;
  postGroupInnerContainer4?: p.Flex<"div">;
  postTitleContainer6?: p.Flex<"div">;
  postTitleInnerContainer6?: p.Flex<"div">;
  postNavContainer4?: p.Flex<"div">;
  postItem6?: p.Flex<typeof PostItem>;
  projectTypeContainer9?: p.Flex<"div">;
};

export interface DefaultHomepageProps {
  children?: React.ReactNode;
  children2?: React.ReactNode;
  children3?: React.ReactNode;
  children5?: React.ReactNode;
  children6?: React.ReactNode;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

export function Head() {
  return <></>;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsacMvPt7MOxbgb()
  });

  return (
    <React.Fragment>
      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"body"}
            data-plasmic-override={overrides.body}
            className={classNames(projectcss.all, sty.body)}
          >
            <div
              data-plasmic-name={"siteNav"}
              data-plasmic-override={overrides.siteNav}
              className={classNames(projectcss.all, sty.siteNav)}
            >
              {true ? (
                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__gv3VT
                  )}
                  component={Link}
                  platform={"gatsby"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___2XHis
                    )}
                  >
                    {"Erik Reiblein"}
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__t75UL
                    )}
                  >
                    {"UX/Product Design"}
                  </div>
                </p.PlasmicLink>
              ) : null}

              <p.Stack
                as={"div"}
                data-plasmic-name={"frame21"}
                data-plasmic-override={overrides.frame21}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame21)}
              >
                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__t1HaS
                  )}
                  component={Link}
                  platform={"gatsby"}
                >
                  {"Work"}
                </p.PlasmicLink>

                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__wojOi
                  )}
                  component={Link}
                  platform={"gatsby"}
                >
                  {"About"}
                </p.PlasmicLink>

                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__rvnpB
                  )}
                  component={Link}
                  platform={"gatsby"}
                >
                  {"Contact"}
                </p.PlasmicLink>
              </p.Stack>
            </div>

            <LandingBannerAnimated
              data-plasmic-name={"landingBannerAnimated"}
              data-plasmic-override={overrides.landingBannerAnimated}
              className={classNames(
                "__wab_instance",
                sty.landingBannerAnimated
              )}
            />

            {true ? (
              <div
                data-plasmic-name={"landingContent"}
                data-plasmic-override={overrides.landingContent}
                className={classNames(projectcss.all, sty.landingContent)}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"workPosts"}
                  data-plasmic-override={overrides.workPosts}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.workPosts)}
                >
                  {true ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__uDiC)}
                    >
                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"postTitleContainer2"}
                        data-plasmic-override={overrides.postTitleContainer2}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.postTitleContainer2
                        )}
                      >
                        <div
                          data-plasmic-name={"postTitleInnerContainer2"}
                          data-plasmic-override={
                            overrides.postTitleInnerContainer2
                          }
                          className={classNames(
                            projectcss.all,
                            sty.postTitleInnerContainer2
                          )}
                        >
                          {p.renderPlasmicSlot({
                            defaultContents: "UX Design Work",
                            value: args.children2,
                            className: classNames(sty.slotTargetChildren2)
                          })}
                        </div>
                      </p.Stack>

                      <ContentfulFetcher
                        className={classNames(
                          "__wab_instance",
                          sty.contentfulFetcher__pSyCg
                        )}
                        contentType={"blogPost" as const}
                        limit={(() => {
                          try {
                            return undefined;
                          } catch (e) {
                            if (e instanceof TypeError) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                        noLayout={true}
                      >
                        <ph.DataCtxReader>
                          {$ctx => (
                            <React.Fragment>
                              <p.PlasmicLink
                                className={classNames(
                                  projectcss.all,
                                  projectcss.a,
                                  sty.link__iLi40
                                )}
                                component={Link}
                                href={(() => {
                                  try {
                                    return $ctx.currentContentfulBlogPostItem
                                      .fields.slug;
                                  } catch (e) {
                                    if (e instanceof TypeError) {
                                      return `/`;
                                    }
                                    throw e;
                                  }
                                })()}
                                platform={"gatsby"}
                              >
                                <ContentfulField
                                  className={classNames(
                                    "__wab_instance",
                                    sty.contentfulField__mt4Yv
                                  )}
                                  objectPath={["postTitle"]}
                                />

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__pSbqM
                                  )}
                                >
                                  {"(For"}
                                </div>

                                <ContentfulField
                                  className={classNames(
                                    "__wab_instance",
                                    sty.contentfulField___00Vn
                                  )}
                                  objectPath={["projectClient"]}
                                />

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__lw04
                                  )}
                                >
                                  {")"}
                                </div>

                                <p.Stack
                                  as={"div"}
                                  data-plasmic-name={"projectTypeContainer3"}
                                  data-plasmic-override={
                                    overrides.projectTypeContainer3
                                  }
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.projectTypeContainer3
                                  )}
                                >
                                  <ContentfulField
                                    className={classNames(
                                      "__wab_instance",
                                      sty.contentfulField__eqOq8
                                    )}
                                    objectPath={["projectType"]}
                                  />
                                </p.Stack>
                              </p.PlasmicLink>

                              {true ? (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__yiskf
                                  )}
                                >
                                  {(
                                    (() => {
                                      try {
                                        return $ctx
                                          .currentContentfulBlogPostItem.fields
                                          .tags[0];
                                      } catch (e) {
                                        if (e instanceof TypeError) {
                                          return [];
                                        }
                                        throw e;
                                      }
                                    })() ?? []
                                  ).map((currentItem, currentIndex) => (
                                    <p.Stack
                                      as={"div"}
                                      data-plasmic-name={"tagContainer"}
                                      data-plasmic-override={
                                        overrides.tagContainer
                                      }
                                      hasGap={true}
                                      className={classNames(
                                        projectcss.all,
                                        sty.tagContainer
                                      )}
                                      key={currentIndex}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__sJ9Zh
                                        )}
                                      >
                                        {"Ideation"}
                                      </div>
                                    </p.Stack>
                                  ))}
                                </div>
                              ) : null}
                            </React.Fragment>
                          )}
                        </ph.DataCtxReader>
                      </ContentfulFetcher>
                    </div>
                  ) : null}

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"postGroupOuterContainer"}
                    data-plasmic-override={overrides.postGroupOuterContainer}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      sty.postGroupOuterContainer
                    )}
                  >
                    <div
                      data-plasmic-name={"postGroupInnerContainer"}
                      data-plasmic-override={overrides.postGroupInnerContainer}
                      className={classNames(
                        projectcss.all,
                        sty.postGroupInnerContainer
                      )}
                    >
                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"postTitleContainer"}
                        data-plasmic-override={overrides.postTitleContainer}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.postTitleContainer
                        )}
                      >
                        <div
                          data-plasmic-name={"postTitleInnerContainer"}
                          data-plasmic-override={
                            overrides.postTitleInnerContainer
                          }
                          className={classNames(
                            projectcss.all,
                            sty.postTitleInnerContainer
                          )}
                        >
                          {p.renderPlasmicSlot({
                            defaultContents: "UX Design Work",
                            value: args.children,
                            className: classNames(sty.slotTargetChildren)
                          })}
                        </div>
                      </p.Stack>

                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"postNavContainer"}
                        data-plasmic-override={overrides.postNavContainer}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.postNavContainer
                        )}
                      >
                        <PostItem
                          data-plasmic-name={"postItem"}
                          data-plasmic-override={overrides.postItem}
                          className={classNames("__wab_instance", sty.postItem)}
                        >
                          <ContentfulFetcher
                            className={classNames(
                              "__wab_instance",
                              sty.contentfulFetcher__yp5F
                            )}
                            contentType={"blogPost" as const}
                            entryID={"3uswRihQ79kxmUvNokovFO" as const}
                            limit={undefined}
                            noLayout={true}
                          >
                            <ph.DataCtxReader>
                              {$ctx => (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__xF52S
                                  )}
                                >
                                  <ContentfulField
                                    className={classNames(
                                      "__wab_instance",
                                      sty.contentfulField__hd1Pn
                                    )}
                                    objectPath={["postTitle"]}
                                  />

                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__gZs6B
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__jq0A0
                                      )}
                                    >
                                      {"(For"}
                                    </div>

                                    <ContentfulField
                                      className={classNames(
                                        "__wab_instance",
                                        sty.contentfulField__hr5BC
                                      )}
                                      objectPath={["projectClient"]}
                                    />

                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__albfV
                                      )}
                                    >
                                      {")"}
                                    </div>
                                  </div>

                                  <p.Stack
                                    as={"div"}
                                    data-plasmic-name={"projectTypeContainer2"}
                                    data-plasmic-override={
                                      overrides.projectTypeContainer2
                                    }
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.projectTypeContainer2
                                    )}
                                  >
                                    <ContentfulField
                                      className={classNames(
                                        "__wab_instance",
                                        sty.contentfulField__ptrwa
                                      )}
                                      objectPath={["projectType"]}
                                    />
                                  </p.Stack>
                                </div>
                              )}
                            </ph.DataCtxReader>
                          </ContentfulFetcher>
                        </PostItem>

                        <PostItem
                          data-plasmic-name={"postItem2"}
                          data-plasmic-override={overrides.postItem2}
                          className={classNames(
                            "__wab_instance",
                            sty.postItem2
                          )}
                        >
                          <ContentfulFetcher
                            className={classNames(
                              "__wab_instance",
                              sty.contentfulFetcher__q5EIg
                            )}
                            contentType={"blogPost" as const}
                            entryID={"3uswRihQ79kxmUvNokovFO" as const}
                            limit={undefined}
                            noLayout={true}
                          >
                            <ph.DataCtxReader>
                              {$ctx => (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__uwbUw
                                  )}
                                >
                                  <ContentfulField
                                    className={classNames(
                                      "__wab_instance",
                                      sty.contentfulField__sfxca
                                    )}
                                    objectPath={["postTitle"]}
                                  />

                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__ihm0A
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__hhjr3
                                      )}
                                    >
                                      {"(For"}
                                    </div>

                                    <ContentfulField
                                      className={classNames(
                                        "__wab_instance",
                                        sty.contentfulField__hv8GF
                                      )}
                                      objectPath={["projectClient"]}
                                    />

                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__iH0
                                      )}
                                    >
                                      {")"}
                                    </div>
                                  </div>

                                  <p.Stack
                                    as={"div"}
                                    data-plasmic-name={"projectTypeContainer4"}
                                    data-plasmic-override={
                                      overrides.projectTypeContainer4
                                    }
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.projectTypeContainer4
                                    )}
                                  >
                                    <ContentfulField
                                      className={classNames(
                                        "__wab_instance",
                                        sty.contentfulField__bjZ07
                                      )}
                                      objectPath={["projectType"]}
                                    />
                                  </p.Stack>
                                </div>
                              )}
                            </ph.DataCtxReader>
                          </ContentfulFetcher>
                        </PostItem>
                      </p.Stack>
                    </div>

                    <div
                      data-plasmic-name={"postGroupInnerContainer2"}
                      data-plasmic-override={overrides.postGroupInnerContainer2}
                      className={classNames(
                        projectcss.all,
                        sty.postGroupInnerContainer2
                      )}
                    >
                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"postTitleContainer3"}
                        data-plasmic-override={overrides.postTitleContainer3}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.postTitleContainer3
                        )}
                      >
                        <div
                          data-plasmic-name={"postTitleInnerContainer3"}
                          data-plasmic-override={
                            overrides.postTitleInnerContainer3
                          }
                          className={classNames(
                            projectcss.all,
                            sty.postTitleInnerContainer3
                          )}
                        >
                          {p.renderPlasmicSlot({
                            defaultContents: "UX Design Work",
                            value: args.children3,
                            className: classNames(sty.slotTargetChildren3)
                          })}
                        </div>
                      </p.Stack>

                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"postNavContainer2"}
                        data-plasmic-override={overrides.postNavContainer2}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.postNavContainer2
                        )}
                      >
                        <PostItem
                          data-plasmic-name={"postItem3"}
                          data-plasmic-override={overrides.postItem3}
                          className={classNames(
                            "__wab_instance",
                            sty.postItem3
                          )}
                        >
                          <ContentfulFetcher
                            className={classNames(
                              "__wab_instance",
                              sty.contentfulFetcher__za62G
                            )}
                            contentType={"blogPost" as const}
                            entryID={"3uswRihQ79kxmUvNokovFO" as const}
                            limit={undefined}
                            noLayout={true}
                          >
                            <ph.DataCtxReader>
                              {$ctx => (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__bt4N8
                                  )}
                                >
                                  <ContentfulField
                                    className={classNames(
                                      "__wab_instance",
                                      sty.contentfulField__nw6A
                                    )}
                                    objectPath={["postTitle"]}
                                  />

                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__hXaOt
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__gxUuy
                                      )}
                                    >
                                      {"(For"}
                                    </div>

                                    <ContentfulField
                                      className={classNames(
                                        "__wab_instance",
                                        sty.contentfulField__wRvDs
                                      )}
                                      objectPath={["projectClient"]}
                                    />

                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__jk7Sc
                                      )}
                                    >
                                      {")"}
                                    </div>
                                  </div>

                                  <p.Stack
                                    as={"div"}
                                    data-plasmic-name={"projectTypeContainer5"}
                                    data-plasmic-override={
                                      overrides.projectTypeContainer5
                                    }
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.projectTypeContainer5
                                    )}
                                  >
                                    <ContentfulField
                                      className={classNames(
                                        "__wab_instance",
                                        sty.contentfulField__vmzf7
                                      )}
                                      objectPath={["projectType"]}
                                    />
                                  </p.Stack>
                                </div>
                              )}
                            </ph.DataCtxReader>
                          </ContentfulFetcher>
                        </PostItem>
                      </p.Stack>
                    </div>
                  </p.Stack>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"blogPosts"}
                  data-plasmic-override={overrides.blogPosts}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.blogPosts)}
                >
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"postGroupOuterContainer2"}
                    data-plasmic-override={overrides.postGroupOuterContainer2}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      sty.postGroupOuterContainer2
                    )}
                  >
                    <div
                      data-plasmic-name={"postGroupInnerContainer3"}
                      data-plasmic-override={overrides.postGroupInnerContainer3}
                      className={classNames(
                        projectcss.all,
                        sty.postGroupInnerContainer3
                      )}
                    >
                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"postTitleContainer5"}
                        data-plasmic-override={overrides.postTitleContainer5}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.postTitleContainer5
                        )}
                      >
                        <div
                          data-plasmic-name={"postTitleInnerContainer5"}
                          data-plasmic-override={
                            overrides.postTitleInnerContainer5
                          }
                          className={classNames(
                            projectcss.all,
                            sty.postTitleInnerContainer5
                          )}
                        >
                          {p.renderPlasmicSlot({
                            defaultContents: "UX Design Work",
                            value: args.children5,
                            className: classNames(sty.slotTargetChildren5)
                          })}
                        </div>
                      </p.Stack>

                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"postNavContainer3"}
                        data-plasmic-override={overrides.postNavContainer3}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.postNavContainer3
                        )}
                      >
                        <PostItem
                          data-plasmic-name={"postItem4"}
                          data-plasmic-override={overrides.postItem4}
                          className={classNames(
                            "__wab_instance",
                            sty.postItem4
                          )}
                        >
                          <ContentfulFetcher
                            className={classNames(
                              "__wab_instance",
                              sty.contentfulFetcher__uy6I
                            )}
                            contentType={"blogPost" as const}
                            entryID={"3uswRihQ79kxmUvNokovFO" as const}
                            limit={undefined}
                            noLayout={true}
                          >
                            <ph.DataCtxReader>
                              {$ctx => (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox___3O16X
                                  )}
                                >
                                  <ContentfulField
                                    className={classNames(
                                      "__wab_instance",
                                      sty.contentfulField__d55Jl
                                    )}
                                    objectPath={["postTitle"]}
                                  />

                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__gnHxn
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__d5FpA
                                      )}
                                    >
                                      {"(For"}
                                    </div>

                                    <ContentfulField
                                      className={classNames(
                                        "__wab_instance",
                                        sty.contentfulField__ht0Ru
                                      )}
                                      objectPath={["projectClient"]}
                                    />

                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__sajpz
                                      )}
                                    >
                                      {")"}
                                    </div>
                                  </div>

                                  <p.Stack
                                    as={"div"}
                                    data-plasmic-name={"projectTypeContainer7"}
                                    data-plasmic-override={
                                      overrides.projectTypeContainer7
                                    }
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.projectTypeContainer7
                                    )}
                                  >
                                    <ContentfulField
                                      className={classNames(
                                        "__wab_instance",
                                        sty.contentfulField__mjfFk
                                      )}
                                      objectPath={["projectType"]}
                                    />
                                  </p.Stack>
                                </div>
                              )}
                            </ph.DataCtxReader>
                          </ContentfulFetcher>
                        </PostItem>

                        <PostItem
                          data-plasmic-name={"postItem5"}
                          data-plasmic-override={overrides.postItem5}
                          className={classNames(
                            "__wab_instance",
                            sty.postItem5
                          )}
                        >
                          <ContentfulFetcher
                            className={classNames(
                              "__wab_instance",
                              sty.contentfulFetcher__r8Ju4
                            )}
                            contentType={"blogPost" as const}
                            entryID={"3uswRihQ79kxmUvNokovFO" as const}
                            limit={undefined}
                            noLayout={true}
                          >
                            <ph.DataCtxReader>
                              {$ctx => (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__riCwu
                                  )}
                                >
                                  <ContentfulField
                                    className={classNames(
                                      "__wab_instance",
                                      sty.contentfulField__rJaEm
                                    )}
                                    objectPath={["postTitle"]}
                                  />

                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox___1JxOu
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__dy8C9
                                      )}
                                    >
                                      {"(For"}
                                    </div>

                                    <ContentfulField
                                      className={classNames(
                                        "__wab_instance",
                                        sty.contentfulField__aS8Xv
                                      )}
                                      objectPath={["projectClient"]}
                                    />

                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__hN9Ad
                                      )}
                                    >
                                      {")"}
                                    </div>
                                  </div>

                                  <p.Stack
                                    as={"div"}
                                    data-plasmic-name={"projectTypeContainer8"}
                                    data-plasmic-override={
                                      overrides.projectTypeContainer8
                                    }
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.projectTypeContainer8
                                    )}
                                  >
                                    <ContentfulField
                                      className={classNames(
                                        "__wab_instance",
                                        sty.contentfulField__bVMb
                                      )}
                                      objectPath={["projectType"]}
                                    />
                                  </p.Stack>
                                </div>
                              )}
                            </ph.DataCtxReader>
                          </ContentfulFetcher>
                        </PostItem>
                      </p.Stack>
                    </div>

                    <div
                      data-plasmic-name={"postGroupInnerContainer4"}
                      data-plasmic-override={overrides.postGroupInnerContainer4}
                      className={classNames(
                        projectcss.all,
                        sty.postGroupInnerContainer4
                      )}
                    >
                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"postTitleContainer6"}
                        data-plasmic-override={overrides.postTitleContainer6}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.postTitleContainer6
                        )}
                      >
                        <div
                          data-plasmic-name={"postTitleInnerContainer6"}
                          data-plasmic-override={
                            overrides.postTitleInnerContainer6
                          }
                          className={classNames(
                            projectcss.all,
                            sty.postTitleInnerContainer6
                          )}
                        >
                          {p.renderPlasmicSlot({
                            defaultContents: "UX Design Work",
                            value: args.children6,
                            className: classNames(sty.slotTargetChildren6)
                          })}
                        </div>
                      </p.Stack>

                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"postNavContainer4"}
                        data-plasmic-override={overrides.postNavContainer4}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.postNavContainer4
                        )}
                      >
                        <PostItem
                          data-plasmic-name={"postItem6"}
                          data-plasmic-override={overrides.postItem6}
                          className={classNames(
                            "__wab_instance",
                            sty.postItem6
                          )}
                        >
                          <ContentfulFetcher
                            className={classNames(
                              "__wab_instance",
                              sty.contentfulFetcher__tzW0J
                            )}
                            contentType={"blogPost" as const}
                            entryID={"3uswRihQ79kxmUvNokovFO" as const}
                            limit={undefined}
                            noLayout={true}
                          >
                            <ph.DataCtxReader>
                              {$ctx => (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__nFlpc
                                  )}
                                >
                                  <ContentfulField
                                    className={classNames(
                                      "__wab_instance",
                                      sty.contentfulField__k4Rnm
                                    )}
                                    objectPath={["postTitle"]}
                                  />

                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__mhByY
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text___87Hic
                                      )}
                                    >
                                      {"(For"}
                                    </div>

                                    <ContentfulField
                                      className={classNames(
                                        "__wab_instance",
                                        sty.contentfulField__gmvpU
                                      )}
                                      objectPath={["projectClient"]}
                                    />

                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__v09Un
                                      )}
                                    >
                                      {")"}
                                    </div>
                                  </div>

                                  <p.Stack
                                    as={"div"}
                                    data-plasmic-name={"projectTypeContainer9"}
                                    data-plasmic-override={
                                      overrides.projectTypeContainer9
                                    }
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.projectTypeContainer9
                                    )}
                                  >
                                    <ContentfulField
                                      className={classNames(
                                        "__wab_instance",
                                        sty.contentfulField__r5L77
                                      )}
                                      objectPath={["projectType"]}
                                    />
                                  </p.Stack>
                                </div>
                              )}
                            </ph.DataCtxReader>
                          </ContentfulFetcher>
                        </PostItem>
                      </p.Stack>
                    </div>
                  </p.Stack>
                </p.Stack>
              </div>
            ) : null}
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "body",
    "siteNav",
    "frame21",
    "landingBannerAnimated",
    "landingContent",
    "workPosts",
    "postTitleContainer2",
    "postTitleInnerContainer2",
    "projectTypeContainer3",
    "tagContainer",
    "postGroupOuterContainer",
    "postGroupInnerContainer",
    "postTitleContainer",
    "postTitleInnerContainer",
    "postNavContainer",
    "postItem",
    "projectTypeContainer2",
    "postItem2",
    "projectTypeContainer4",
    "postGroupInnerContainer2",
    "postTitleContainer3",
    "postTitleInnerContainer3",
    "postNavContainer2",
    "postItem3",
    "projectTypeContainer5",
    "blogPosts",
    "postGroupOuterContainer2",
    "postGroupInnerContainer3",
    "postTitleContainer5",
    "postTitleInnerContainer5",
    "postNavContainer3",
    "postItem4",
    "projectTypeContainer7",
    "postItem5",
    "projectTypeContainer8",
    "postGroupInnerContainer4",
    "postTitleContainer6",
    "postTitleInnerContainer6",
    "postNavContainer4",
    "postItem6",
    "projectTypeContainer9"
  ],
  body: [
    "body",
    "siteNav",
    "frame21",
    "landingBannerAnimated",
    "landingContent",
    "workPosts",
    "postTitleContainer2",
    "postTitleInnerContainer2",
    "projectTypeContainer3",
    "tagContainer",
    "postGroupOuterContainer",
    "postGroupInnerContainer",
    "postTitleContainer",
    "postTitleInnerContainer",
    "postNavContainer",
    "postItem",
    "projectTypeContainer2",
    "postItem2",
    "projectTypeContainer4",
    "postGroupInnerContainer2",
    "postTitleContainer3",
    "postTitleInnerContainer3",
    "postNavContainer2",
    "postItem3",
    "projectTypeContainer5",
    "blogPosts",
    "postGroupOuterContainer2",
    "postGroupInnerContainer3",
    "postTitleContainer5",
    "postTitleInnerContainer5",
    "postNavContainer3",
    "postItem4",
    "projectTypeContainer7",
    "postItem5",
    "projectTypeContainer8",
    "postGroupInnerContainer4",
    "postTitleContainer6",
    "postTitleInnerContainer6",
    "postNavContainer4",
    "postItem6",
    "projectTypeContainer9"
  ],
  siteNav: ["siteNav", "frame21"],
  frame21: ["frame21"],
  landingBannerAnimated: ["landingBannerAnimated"],
  landingContent: [
    "landingContent",
    "workPosts",
    "postTitleContainer2",
    "postTitleInnerContainer2",
    "projectTypeContainer3",
    "tagContainer",
    "postGroupOuterContainer",
    "postGroupInnerContainer",
    "postTitleContainer",
    "postTitleInnerContainer",
    "postNavContainer",
    "postItem",
    "projectTypeContainer2",
    "postItem2",
    "projectTypeContainer4",
    "postGroupInnerContainer2",
    "postTitleContainer3",
    "postTitleInnerContainer3",
    "postNavContainer2",
    "postItem3",
    "projectTypeContainer5",
    "blogPosts",
    "postGroupOuterContainer2",
    "postGroupInnerContainer3",
    "postTitleContainer5",
    "postTitleInnerContainer5",
    "postNavContainer3",
    "postItem4",
    "projectTypeContainer7",
    "postItem5",
    "projectTypeContainer8",
    "postGroupInnerContainer4",
    "postTitleContainer6",
    "postTitleInnerContainer6",
    "postNavContainer4",
    "postItem6",
    "projectTypeContainer9"
  ],
  workPosts: [
    "workPosts",
    "postTitleContainer2",
    "postTitleInnerContainer2",
    "projectTypeContainer3",
    "tagContainer",
    "postGroupOuterContainer",
    "postGroupInnerContainer",
    "postTitleContainer",
    "postTitleInnerContainer",
    "postNavContainer",
    "postItem",
    "projectTypeContainer2",
    "postItem2",
    "projectTypeContainer4",
    "postGroupInnerContainer2",
    "postTitleContainer3",
    "postTitleInnerContainer3",
    "postNavContainer2",
    "postItem3",
    "projectTypeContainer5"
  ],
  postTitleContainer2: ["postTitleContainer2", "postTitleInnerContainer2"],
  postTitleInnerContainer2: ["postTitleInnerContainer2"],
  projectTypeContainer3: ["projectTypeContainer3"],
  tagContainer: ["tagContainer"],
  postGroupOuterContainer: [
    "postGroupOuterContainer",
    "postGroupInnerContainer",
    "postTitleContainer",
    "postTitleInnerContainer",
    "postNavContainer",
    "postItem",
    "projectTypeContainer2",
    "postItem2",
    "projectTypeContainer4",
    "postGroupInnerContainer2",
    "postTitleContainer3",
    "postTitleInnerContainer3",
    "postNavContainer2",
    "postItem3",
    "projectTypeContainer5"
  ],
  postGroupInnerContainer: [
    "postGroupInnerContainer",
    "postTitleContainer",
    "postTitleInnerContainer",
    "postNavContainer",
    "postItem",
    "projectTypeContainer2",
    "postItem2",
    "projectTypeContainer4"
  ],
  postTitleContainer: ["postTitleContainer", "postTitleInnerContainer"],
  postTitleInnerContainer: ["postTitleInnerContainer"],
  postNavContainer: [
    "postNavContainer",
    "postItem",
    "projectTypeContainer2",
    "postItem2",
    "projectTypeContainer4"
  ],
  postItem: ["postItem", "projectTypeContainer2"],
  projectTypeContainer2: ["projectTypeContainer2"],
  postItem2: ["postItem2", "projectTypeContainer4"],
  projectTypeContainer4: ["projectTypeContainer4"],
  postGroupInnerContainer2: [
    "postGroupInnerContainer2",
    "postTitleContainer3",
    "postTitleInnerContainer3",
    "postNavContainer2",
    "postItem3",
    "projectTypeContainer5"
  ],
  postTitleContainer3: ["postTitleContainer3", "postTitleInnerContainer3"],
  postTitleInnerContainer3: ["postTitleInnerContainer3"],
  postNavContainer2: [
    "postNavContainer2",
    "postItem3",
    "projectTypeContainer5"
  ],
  postItem3: ["postItem3", "projectTypeContainer5"],
  projectTypeContainer5: ["projectTypeContainer5"],
  blogPosts: [
    "blogPosts",
    "postGroupOuterContainer2",
    "postGroupInnerContainer3",
    "postTitleContainer5",
    "postTitleInnerContainer5",
    "postNavContainer3",
    "postItem4",
    "projectTypeContainer7",
    "postItem5",
    "projectTypeContainer8",
    "postGroupInnerContainer4",
    "postTitleContainer6",
    "postTitleInnerContainer6",
    "postNavContainer4",
    "postItem6",
    "projectTypeContainer9"
  ],
  postGroupOuterContainer2: [
    "postGroupOuterContainer2",
    "postGroupInnerContainer3",
    "postTitleContainer5",
    "postTitleInnerContainer5",
    "postNavContainer3",
    "postItem4",
    "projectTypeContainer7",
    "postItem5",
    "projectTypeContainer8",
    "postGroupInnerContainer4",
    "postTitleContainer6",
    "postTitleInnerContainer6",
    "postNavContainer4",
    "postItem6",
    "projectTypeContainer9"
  ],
  postGroupInnerContainer3: [
    "postGroupInnerContainer3",
    "postTitleContainer5",
    "postTitleInnerContainer5",
    "postNavContainer3",
    "postItem4",
    "projectTypeContainer7",
    "postItem5",
    "projectTypeContainer8"
  ],
  postTitleContainer5: ["postTitleContainer5", "postTitleInnerContainer5"],
  postTitleInnerContainer5: ["postTitleInnerContainer5"],
  postNavContainer3: [
    "postNavContainer3",
    "postItem4",
    "projectTypeContainer7",
    "postItem5",
    "projectTypeContainer8"
  ],
  postItem4: ["postItem4", "projectTypeContainer7"],
  projectTypeContainer7: ["projectTypeContainer7"],
  postItem5: ["postItem5", "projectTypeContainer8"],
  projectTypeContainer8: ["projectTypeContainer8"],
  postGroupInnerContainer4: [
    "postGroupInnerContainer4",
    "postTitleContainer6",
    "postTitleInnerContainer6",
    "postNavContainer4",
    "postItem6",
    "projectTypeContainer9"
  ],
  postTitleContainer6: ["postTitleContainer6", "postTitleInnerContainer6"],
  postTitleInnerContainer6: ["postTitleInnerContainer6"],
  postNavContainer4: [
    "postNavContainer4",
    "postItem6",
    "projectTypeContainer9"
  ],
  postItem6: ["postItem6", "projectTypeContainer9"],
  projectTypeContainer9: ["projectTypeContainer9"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  body: "div";
  siteNav: "div";
  frame21: "div";
  landingBannerAnimated: typeof LandingBannerAnimated;
  landingContent: "div";
  workPosts: "div";
  postTitleContainer2: "div";
  postTitleInnerContainer2: "div";
  projectTypeContainer3: "div";
  tagContainer: "div";
  postGroupOuterContainer: "div";
  postGroupInnerContainer: "div";
  postTitleContainer: "div";
  postTitleInnerContainer: "div";
  postNavContainer: "div";
  postItem: typeof PostItem;
  projectTypeContainer2: "div";
  postItem2: typeof PostItem;
  projectTypeContainer4: "div";
  postGroupInnerContainer2: "div";
  postTitleContainer3: "div";
  postTitleInnerContainer3: "div";
  postNavContainer2: "div";
  postItem3: typeof PostItem;
  projectTypeContainer5: "div";
  blogPosts: "div";
  postGroupOuterContainer2: "div";
  postGroupInnerContainer3: "div";
  postTitleContainer5: "div";
  postTitleInnerContainer5: "div";
  postNavContainer3: "div";
  postItem4: typeof PostItem;
  projectTypeContainer7: "div";
  postItem5: typeof PostItem;
  projectTypeContainer8: "div";
  postGroupInnerContainer4: "div";
  postTitleContainer6: "div";
  postTitleInnerContainer6: "div";
  postNavContainer4: "div";
  postItem6: typeof PostItem;
  projectTypeContainer9: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    body: makeNodeComponent("body"),
    siteNav: makeNodeComponent("siteNav"),
    frame21: makeNodeComponent("frame21"),
    landingBannerAnimated: makeNodeComponent("landingBannerAnimated"),
    landingContent: makeNodeComponent("landingContent"),
    workPosts: makeNodeComponent("workPosts"),
    postTitleContainer2: makeNodeComponent("postTitleContainer2"),
    postTitleInnerContainer2: makeNodeComponent("postTitleInnerContainer2"),
    projectTypeContainer3: makeNodeComponent("projectTypeContainer3"),
    tagContainer: makeNodeComponent("tagContainer"),
    postGroupOuterContainer: makeNodeComponent("postGroupOuterContainer"),
    postGroupInnerContainer: makeNodeComponent("postGroupInnerContainer"),
    postTitleContainer: makeNodeComponent("postTitleContainer"),
    postTitleInnerContainer: makeNodeComponent("postTitleInnerContainer"),
    postNavContainer: makeNodeComponent("postNavContainer"),
    postItem: makeNodeComponent("postItem"),
    projectTypeContainer2: makeNodeComponent("projectTypeContainer2"),
    postItem2: makeNodeComponent("postItem2"),
    projectTypeContainer4: makeNodeComponent("projectTypeContainer4"),
    postGroupInnerContainer2: makeNodeComponent("postGroupInnerContainer2"),
    postTitleContainer3: makeNodeComponent("postTitleContainer3"),
    postTitleInnerContainer3: makeNodeComponent("postTitleInnerContainer3"),
    postNavContainer2: makeNodeComponent("postNavContainer2"),
    postItem3: makeNodeComponent("postItem3"),
    projectTypeContainer5: makeNodeComponent("projectTypeContainer5"),
    blogPosts: makeNodeComponent("blogPosts"),
    postGroupOuterContainer2: makeNodeComponent("postGroupOuterContainer2"),
    postGroupInnerContainer3: makeNodeComponent("postGroupInnerContainer3"),
    postTitleContainer5: makeNodeComponent("postTitleContainer5"),
    postTitleInnerContainer5: makeNodeComponent("postTitleInnerContainer5"),
    postNavContainer3: makeNodeComponent("postNavContainer3"),
    postItem4: makeNodeComponent("postItem4"),
    projectTypeContainer7: makeNodeComponent("projectTypeContainer7"),
    postItem5: makeNodeComponent("postItem5"),
    projectTypeContainer8: makeNodeComponent("projectTypeContainer8"),
    postGroupInnerContainer4: makeNodeComponent("postGroupInnerContainer4"),
    postTitleContainer6: makeNodeComponent("postTitleContainer6"),
    postTitleInnerContainer6: makeNodeComponent("postTitleInnerContainer6"),
    postNavContainer4: makeNodeComponent("postNavContainer4"),
    postItem6: makeNodeComponent("postItem6"),
    projectTypeContainer9: makeNodeComponent("projectTypeContainer9"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
