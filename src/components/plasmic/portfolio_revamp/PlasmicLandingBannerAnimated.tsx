// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: pPMwtDeJqhjkevukr6y1tF
// Component: PvD0-TnnhU
import * as React from "react";

import { Link, GatsbyLinkProps as LinkProps } from "gatsby";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import { useScreenVariants as useScreenVariantsacMvPt7MOxbgb } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: AcMvPt7MOxbgb/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic_portfolio_revamp.module.css"; // plasmic-import: pPMwtDeJqhjkevukr6y1tF/projectcss
import * as sty from "./PlasmicLandingBannerAnimated.module.css"; // plasmic-import: PvD0-TnnhU/css

import imageT9Tp7XQjv from "./images/image.svg"; // plasmic-import: t9tp7xQjv/picture

export type PlasmicLandingBannerAnimated__VariantMembers = {};
export type PlasmicLandingBannerAnimated__VariantsArgs = {};
type VariantPropType = keyof PlasmicLandingBannerAnimated__VariantsArgs;
export const PlasmicLandingBannerAnimated__VariantProps =
  new Array<VariantPropType>();

export type PlasmicLandingBannerAnimated__ArgsType = {};
type ArgPropType = keyof PlasmicLandingBannerAnimated__ArgsType;
export const PlasmicLandingBannerAnimated__ArgProps = new Array<ArgPropType>();

export type PlasmicLandingBannerAnimated__OverridesType = {
  pageBanner?: p.Flex<"div">;
  group17?: p.Flex<"div">;
  img?: p.Flex<typeof p.PlasmicImg>;
  text?: p.Flex<"div">;
};

export interface DefaultLandingBannerAnimatedProps {
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicLandingBannerAnimated__RenderFunc(props: {
  variants: PlasmicLandingBannerAnimated__VariantsArgs;
  args: PlasmicLandingBannerAnimated__ArgsType;
  overrides: PlasmicLandingBannerAnimated__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsacMvPt7MOxbgb()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"pageBanner"}
      data-plasmic-override={overrides.pageBanner}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.pageBanner
      )}
    >
      <div
        data-plasmic-name={"group17"}
        data-plasmic-override={overrides.group17}
        className={classNames(projectcss.all, sty.group17)}
      >
        <p.PlasmicImg
          data-plasmic-name={"img"}
          data-plasmic-override={overrides.img}
          alt={""}
          className={classNames(sty.img)}
          displayHeight={"100%" as const}
          displayMaxHeight={"none" as const}
          displayMaxWidth={"none" as const}
          displayMinHeight={"0" as const}
          displayMinWidth={"0" as const}
          displayWidth={"100%" as const}
          loading={"lazy" as const}
          src={{
            src: imageT9Tp7XQjv,
            fullWidth: 285,
            fullHeight: 150,
            aspectRatio: 1.901587
          }}
        />
      </div>

      <div
        data-plasmic-name={"text"}
        data-plasmic-override={overrides.text}
        className={classNames(projectcss.all, projectcss.__wab_text, sty.text)}
      >
        {
          "Erik Reiblein is a user experience designer who specializes in tackling projects with complex functionality requirements."
        }
      </div>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  pageBanner: ["pageBanner", "group17", "img", "text"],
  group17: ["group17", "img"],
  img: ["img"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  pageBanner: "div";
  group17: "div";
  img: typeof p.PlasmicImg;
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLandingBannerAnimated__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLandingBannerAnimated__VariantsArgs;
    args?: PlasmicLandingBannerAnimated__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLandingBannerAnimated__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicLandingBannerAnimated__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicLandingBannerAnimated__ArgProps,
          internalVariantPropNames: PlasmicLandingBannerAnimated__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicLandingBannerAnimated__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "pageBanner") {
    func.displayName = "PlasmicLandingBannerAnimated";
  } else {
    func.displayName = `PlasmicLandingBannerAnimated.${nodeName}`;
  }
  return func;
}

export const PlasmicLandingBannerAnimated = Object.assign(
  // Top-level PlasmicLandingBannerAnimated renders the root element
  makeNodeComponent("pageBanner"),
  {
    // Helper components rendering sub-elements
    group17: makeNodeComponent("group17"),
    img: makeNodeComponent("img"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicLandingBannerAnimated
    internalVariantProps: PlasmicLandingBannerAnimated__VariantProps,
    internalArgProps: PlasmicLandingBannerAnimated__ArgProps
  }
);

export default PlasmicLandingBannerAnimated;
/* prettier-ignore-end */
