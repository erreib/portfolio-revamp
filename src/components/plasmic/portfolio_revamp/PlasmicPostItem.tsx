// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: pPMwtDeJqhjkevukr6y1tF
// Component: _u_Efw8ed7
import * as React from "react";

import { Link, GatsbyLinkProps as LinkProps } from "gatsby";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { ContentfulFetcher } from "@plasmicpkgs/plasmic-contentful"; // plasmic-import: 2evg2Dug_px/codeComponent
import { ContentfulField } from "@plasmicpkgs/plasmic-contentful"; // plasmic-import: XJVyShAqlB9/codeComponent
import Tag from "../../Tag"; // plasmic-import: 33PNNS5HMU/component

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic_portfolio_revamp.module.css"; // plasmic-import: pPMwtDeJqhjkevukr6y1tF/projectcss
import * as sty from "./PlasmicPostItem.module.css"; // plasmic-import: _u_Efw8ed7/css

import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: 4gPk7LaR-s/icon

export type PlasmicPostItem__VariantMembers = {};
export type PlasmicPostItem__VariantsArgs = {};
type VariantPropType = keyof PlasmicPostItem__VariantsArgs;
export const PlasmicPostItem__VariantProps = new Array<VariantPropType>();

export type PlasmicPostItem__ArgsType = {
  children?: React.ReactNode;
};
type ArgPropType = keyof PlasmicPostItem__ArgsType;
export const PlasmicPostItem__ArgProps = new Array<ArgPropType>("children");

export type PlasmicPostItem__OverridesType = {
  postContainer?: p.Flex<"a"> & Partial<LinkProps>;
  postTitleInfo?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
  svg?: p.Flex<"svg">;
  postTagContainer?: p.Flex<"div">;
  tag?: p.Flex<typeof Tag>;
  text?: p.Flex<"div">;
};

export interface DefaultPostItemProps {
  children?: React.ReactNode;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicPostItem__RenderFunc(props: {
  variants: PlasmicPostItem__VariantsArgs;
  args: PlasmicPostItem__ArgsType;
  overrides: PlasmicPostItem__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  return (
    <p.Stack
      as={p.PlasmicLink}
      data-plasmic-name={"postContainer"}
      data-plasmic-override={overrides.postContainer}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.a,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.postContainer
      )}
      component={Link}
      platform={"gatsby"}
    >
      <div
        data-plasmic-name={"postTitleInfo"}
        data-plasmic-override={overrides.postTitleInfo}
        className={classNames(projectcss.all, sty.postTitleInfo)}
      >
        {true ? (
          <p.Stack
            as={"div"}
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox)}
          >
            <Icon2Icon
              data-plasmic-name={"svg"}
              data-plasmic-override={overrides.svg}
              className={classNames(projectcss.all, sty.svg)}
              role={"img"}
            />

            {p.renderPlasmicSlot({
              defaultContents: (
                <ContentfulFetcher
                  className={classNames(
                    "__wab_instance",
                    sty.contentfulFetcher__t1QvA
                  )}
                  contentType={"blogPost" as const}
                  entryID={"6kP47XW91Cmtq4GHbn39lj" as const}
                  limit={1000 as const}
                  noLayout={true}
                >
                  <ph.DataCtxReader>
                    {$ctx => (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___24Ahf
                        )}
                      >
                        <ContentfulField
                          className={classNames(
                            "__wab_instance",
                            sty.contentfulField__qPbq7
                          )}
                          objectPath={["postTitle"]}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__oNwQ2
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__o9I6P
                            )}
                          >
                            {"(For"}
                          </div>

                          <ContentfulField
                            className={classNames(
                              "__wab_instance",
                              sty.contentfulField__io4K
                            )}
                            objectPath={["projectClient"]}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__uZ0QO
                            )}
                          >
                            {")"}
                          </div>
                        </div>

                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__pt0Z
                          )}
                        >
                          <ContentfulField
                            className={classNames(
                              "__wab_instance",
                              sty.contentfulField__ePmu5
                            )}
                            objectPath={["projectType"]}
                          />
                        </p.Stack>
                      </div>
                    )}
                  </ph.DataCtxReader>
                </ContentfulFetcher>
              ),

              value: args.children
            })}
          </p.Stack>
        ) : null}
      </div>

      <p.Stack
        as={"div"}
        data-plasmic-name={"postTagContainer"}
        data-plasmic-override={overrides.postTagContainer}
        hasGap={true}
        className={classNames(projectcss.all, sty.postTagContainer)}
      >
        {(
          (() => {
            try {
              return [2, 3, 4, 5];
            } catch (e) {
              if (e instanceof TypeError) {
                return [];
              }
              throw e;
            }
          })() ?? []
        ).map((currentItem, currentIndex) => (
          <Tag
            data-plasmic-name={"tag"}
            data-plasmic-override={overrides.tag}
            className={classNames("__wab_instance", sty.tag)}
            key={currentIndex}
            tagText={
              <div
                data-plasmic-name={"text"}
                data-plasmic-override={overrides.text}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text
                )}
              >
                {"Development"}
              </div>
            }
          />
        ))}
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  postContainer: [
    "postContainer",
    "postTitleInfo",
    "freeBox",
    "svg",
    "postTagContainer",
    "tag",
    "text"
  ],
  postTitleInfo: ["postTitleInfo", "freeBox", "svg"],
  freeBox: ["freeBox", "svg"],
  svg: ["svg"],
  postTagContainer: ["postTagContainer", "tag", "text"],
  tag: ["tag", "text"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  postContainer: "a";
  postTitleInfo: "div";
  freeBox: "div";
  svg: "svg";
  postTagContainer: "div";
  tag: typeof Tag;
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPostItem__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPostItem__VariantsArgs;
    args?: PlasmicPostItem__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPostItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicPostItem__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicPostItem__ArgProps,
          internalVariantPropNames: PlasmicPostItem__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicPostItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "postContainer") {
    func.displayName = "PlasmicPostItem";
  } else {
    func.displayName = `PlasmicPostItem.${nodeName}`;
  }
  return func;
}

export const PlasmicPostItem = Object.assign(
  // Top-level PlasmicPostItem renders the root element
  makeNodeComponent("postContainer"),
  {
    // Helper components rendering sub-elements
    postTitleInfo: makeNodeComponent("postTitleInfo"),
    freeBox: makeNodeComponent("freeBox"),
    svg: makeNodeComponent("svg"),
    postTagContainer: makeNodeComponent("postTagContainer"),
    tag: makeNodeComponent("tag"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicPostItem
    internalVariantProps: PlasmicPostItem__VariantProps,
    internalArgProps: PlasmicPostItem__ArgProps
  }
);

export default PlasmicPostItem;
/* prettier-ignore-end */
