// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: pPMwtDeJqhjkevukr6y1tF
// Component: 7uOT7ub377V
import * as React from "react";

import { Link, GatsbyLinkProps as LinkProps } from "gatsby";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import PostItem from "../../PostItem"; // plasmic-import: _u_Efw8ed7/component
import { ContentfulFetcher } from "@plasmicpkgs/plasmic-contentful"; // plasmic-import: 2evg2Dug_px/codeComponent
import { ContentfulField } from "@plasmicpkgs/plasmic-contentful"; // plasmic-import: XJVyShAqlB9/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic_portfolio_revamp.module.css"; // plasmic-import: pPMwtDeJqhjkevukr6y1tF/projectcss
import * as sty from "./PlasmicPostGroup.module.css"; // plasmic-import: 7uOT7ub377V/css

export type PlasmicPostGroup__VariantMembers = {};
export type PlasmicPostGroup__VariantsArgs = {};
type VariantPropType = keyof PlasmicPostGroup__VariantsArgs;
export const PlasmicPostGroup__VariantProps = new Array<VariantPropType>();

export type PlasmicPostGroup__ArgsType = {
  children?: React.ReactNode;
};
type ArgPropType = keyof PlasmicPostGroup__ArgsType;
export const PlasmicPostGroup__ArgProps = new Array<ArgPropType>("children");

export type PlasmicPostGroup__OverridesType = {
  postGroupOuterContainer?: p.Flex<"div">;
  postGroupInnerContainer?: p.Flex<"div">;
  postTitleContainer?: p.Flex<"div">;
  postTitleInnerContainer?: p.Flex<"div">;
  postNavContainer?: p.Flex<"div">;
  postItem?: p.Flex<typeof PostItem>;
  contentfulFetcher?: p.Flex<typeof ContentfulFetcher>;
  projectTypeContainer2?: p.Flex<"div">;
};

export interface DefaultPostGroupProps {
  children?: React.ReactNode;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicPostGroup__RenderFunc(props: {
  variants: PlasmicPostGroup__VariantsArgs;
  args: PlasmicPostGroup__ArgsType;
  overrides: PlasmicPostGroup__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"postGroupOuterContainer"}
      data-plasmic-override={overrides.postGroupOuterContainer}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.postGroupOuterContainer
      )}
    >
      <div
        data-plasmic-name={"postGroupInnerContainer"}
        data-plasmic-override={overrides.postGroupInnerContainer}
        className={classNames(projectcss.all, sty.postGroupInnerContainer)}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"postTitleContainer"}
          data-plasmic-override={overrides.postTitleContainer}
          hasGap={true}
          className={classNames(projectcss.all, sty.postTitleContainer)}
        >
          <div
            data-plasmic-name={"postTitleInnerContainer"}
            data-plasmic-override={overrides.postTitleInnerContainer}
            className={classNames(projectcss.all, sty.postTitleInnerContainer)}
          >
            {p.renderPlasmicSlot({
              defaultContents: "UX Design Work",
              value: args.children,
              className: classNames(sty.slotTargetChildren)
            })}
          </div>
        </p.Stack>

        <p.Stack
          as={"div"}
          data-plasmic-name={"postNavContainer"}
          data-plasmic-override={overrides.postNavContainer}
          hasGap={true}
          className={classNames(projectcss.all, sty.postNavContainer)}
        >
          {([2, 3, 4] ?? []).map((currentItem, __index) => (
            <PostItem
              data-plasmic-name={"postItem"}
              data-plasmic-override={overrides.postItem}
              className={classNames("__wab_instance", sty.postItem)}
              key={__index}
            >
              <ContentfulFetcher
                data-plasmic-name={"contentfulFetcher"}
                data-plasmic-override={overrides.contentfulFetcher}
                className={classNames("__wab_instance", sty.contentfulFetcher)}
                contentType={"blogPost" as const}
                entryID={"6kP47XW91Cmtq4GHbn39lj" as const}
                limit={1000 as const}
                noLayout={true}
              >
                <ph.DataCtxReader>
                  {$ctx => (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__wRvdR)}
                    >
                      <ContentfulField
                        className={classNames(
                          "__wab_instance",
                          sty.contentfulField__z0JRf
                        )}
                        objectPath={["postTitle"]}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__wLujd
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__fkGe9
                          )}
                        >
                          {"(For"}
                        </div>

                        <ContentfulField
                          className={classNames(
                            "__wab_instance",
                            sty.contentfulField__pG80I
                          )}
                          objectPath={["projectClient"]}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__wfB1C
                          )}
                        >
                          {")"}
                        </div>
                      </div>

                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"projectTypeContainer2"}
                        data-plasmic-override={overrides.projectTypeContainer2}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.projectTypeContainer2
                        )}
                      >
                        <ContentfulField
                          className={classNames(
                            "__wab_instance",
                            sty.contentfulField__ofX1E
                          )}
                          objectPath={["projectType"]}
                        />
                      </p.Stack>
                    </div>
                  )}
                </ph.DataCtxReader>
              </ContentfulFetcher>
            </PostItem>
          ))}
        </p.Stack>
      </div>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  postGroupOuterContainer: [
    "postGroupOuterContainer",
    "postGroupInnerContainer",
    "postTitleContainer",
    "postTitleInnerContainer",
    "postNavContainer",
    "postItem",
    "contentfulFetcher",
    "projectTypeContainer2"
  ],
  postGroupInnerContainer: [
    "postGroupInnerContainer",
    "postTitleContainer",
    "postTitleInnerContainer",
    "postNavContainer",
    "postItem",
    "contentfulFetcher",
    "projectTypeContainer2"
  ],
  postTitleContainer: ["postTitleContainer", "postTitleInnerContainer"],
  postTitleInnerContainer: ["postTitleInnerContainer"],
  postNavContainer: [
    "postNavContainer",
    "postItem",
    "contentfulFetcher",
    "projectTypeContainer2"
  ],
  postItem: ["postItem", "contentfulFetcher", "projectTypeContainer2"],
  contentfulFetcher: ["contentfulFetcher", "projectTypeContainer2"],
  projectTypeContainer2: ["projectTypeContainer2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  postGroupOuterContainer: "div";
  postGroupInnerContainer: "div";
  postTitleContainer: "div";
  postTitleInnerContainer: "div";
  postNavContainer: "div";
  postItem: typeof PostItem;
  contentfulFetcher: typeof ContentfulFetcher;
  projectTypeContainer2: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPostGroup__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPostGroup__VariantsArgs;
    args?: PlasmicPostGroup__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPostGroup__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicPostGroup__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicPostGroup__ArgProps,
          internalVariantPropNames: PlasmicPostGroup__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicPostGroup__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "postGroupOuterContainer") {
    func.displayName = "PlasmicPostGroup";
  } else {
    func.displayName = `PlasmicPostGroup.${nodeName}`;
  }
  return func;
}

export const PlasmicPostGroup = Object.assign(
  // Top-level PlasmicPostGroup renders the root element
  makeNodeComponent("postGroupOuterContainer"),
  {
    // Helper components rendering sub-elements
    postGroupInnerContainer: makeNodeComponent("postGroupInnerContainer"),
    postTitleContainer: makeNodeComponent("postTitleContainer"),
    postTitleInnerContainer: makeNodeComponent("postTitleInnerContainer"),
    postNavContainer: makeNodeComponent("postNavContainer"),
    postItem: makeNodeComponent("postItem"),
    contentfulFetcher: makeNodeComponent("contentfulFetcher"),
    projectTypeContainer2: makeNodeComponent("projectTypeContainer2"),

    // Metadata about props expected for PlasmicPostGroup
    internalVariantProps: PlasmicPostGroup__VariantProps,
    internalArgProps: PlasmicPostGroup__ArgProps
  }
);

export default PlasmicPostGroup;
/* prettier-ignore-end */
